#!/usr/bin/bash
# 1. GET DICTIONARIES FROM üëá
# https://github.com/indic-dict/stardict-index
# file -> dictionaryIndices.md
#               OR
# https://web.archive.org/web/20200702000038/http://download.huzheng.org/
#
# 2. EXTRACT THEM INTO /usr/share/stardict/dic/
# 3. USE konsole terminal (renders Bengali best so far, use Nimbus Mono ps Font)
# -----------------------------------------------------

# ---------------- styling -------------
# Define color codes
NC='\033[0m' # No Color (reset to default)
# Regular Colors
BLACK='\033[0;30m'  # Black
RED='\033[0;31m'    # Red
GREEN='\033[0;32m'  # Green
YELLOW='\033[0;33m' # Yellow
BLUE='\033[0;34m'   # Blue
PURPLE='\033[0;35m' # Purple
CYAN='\033[0;36m'   # Cyan
WHITE='\033[0;37m'  # White
# Bright Colors
BRIGHT_BLACK='\033[1;30m'  # Bright Black (Gray)
BRIGHT_RED='\033[1;31m'    # Bright Red
BRIGHT_GREEN='\033[1;32m'  # Bright Green
BRIGHT_YELLOW='\033[1;33m' # Bright Yellow
BRIGHT_BLUE='\033[1;34m'   # Bright Blue
BRIGHT_PURPLE='\033[1;35m' # Bright Purple
BRIGHT_CYAN='\033[1;36m'   # Bright Cyan
BRIGHT_WHITE='\033[1;37m'  # Bright White
# Special Text Formats
BOLD='\033[1m'      # Bold text
DIM='\033[2m'       # Dim text
UNDERLINE='\033[4m' # Underlined text
BLINK='\033[5m'     # Blinking text
INVERT='\033[7m'    # Inverted colors
HIDDEN='\033[8m'    # Hidden text
# ---------------- styling end -------------

# List all dictionaries
all_dictionaries=$(sdcv -l)

# Function to process Bangla dictionaries
process_bangla_dictionaries() {
	local search_term="$1"
	local bangla_dictionaries=$(echo "$all_dictionaries" | grep -Ei "bangla|bengali" | awk -F ' - ' '{print $1}' | sed 's/ [0-9]*$//' | tr '\n' ',' | sed 's/,$//')

	local bangla_results=""
	IFS=',' read -ra dict_array <<<"$bangla_dictionaries"
	for dict in "${dict_array[@]}"; do
		# bangla_results+="  $dict"$'\n'

		trimmed_dict=$(echo "$dict" | sed 's/^ *//;s/ *$//')
		result=$(sdcv -n -u "$trimmed_dict" "$search_term" 2>/dev/null)
		result=$(echo "$result" | sed -n "/^[^Found]/p")
		result=$(echo "$result" | sed -n "/^[^Enter]/p")
		result=$(echo "$result" | sed "/^-->.*$trimmed_dict$/d")

		# Process the result into -->word: result format
		formatted_result=$(echo "$result" | awk '
		BEGIN { RS="-->"; FS="\n"; ORS="" }
		NR > 1 {
		    word = $1
		    result = ""
		    for (i = 2; i <= NF; i++) {
		        result = result (result ? " " : "") $i
		    }
		    print "    " word ": " result "\n"
		}')

		# Append the formatted result to the final output
		bangla_results+="$formatted_result"$'\n'
	done

	bangla_results=$(echo "$bangla_results" | awk -F': ' '
        {
            word[tolower($1)] = word[tolower($1)] ? word[tolower($1)] ", " $2 : $2
        }
        END {
            for (w in word) {
                print w ": " word[w]
            }
        }')
	bangla_results=$(echo "$bangla_results" | sed 's/ ,/,/g' | sed '/^ *:/d' | sed 's/^ *//;s/ *$//' | awk NF)

	echo "$bangla_results"
}

# Function to process English dictionaries
process_english_dictionaries() {
	local search_term="$1"
	local english_dictionaries=$(echo "$all_dictionaries" | grep -Ei "WordNet" | awk -F ' - ' '{print $1}' | sed 's/ [0-9]*$//' | tr '\n' ',' | sed 's/,$//')

	local english_results=""
	IFS=',' read -ra dict_array <<<"$english_dictionaries"
	for dict in "${dict_array[@]}"; do
		trimmed_dict=$(echo "$dict" | sed 's/^ *//;s/ *$//')
		result=$(sdcv -c -n -u "$trimmed_dict" "$search_term" 2>/dev/null)
		result=$(echo "$result" | sed -n "/^[^Found]/p")
		result=$(echo "$result" | sed '/^ *$/d' | sed "/^-->.*$trimmed_dict$/d" | awk 'BEGIN{ORS=""} /-->/{gsub(/\n\n/,"\n"); print $0"\n"} !/-->/{print $0"\n"}')
		result=$(echo "$result" | sed '/^ *$/d' | sed 's/^ *-->/\n-->/')
		# TODO: remove every 2nd space from result
		english_results+="$result"$'\n'
	done

	echo "$english_results"
}

dict_main() {
	local search_term="$1"
	bangla_results=$(process_bangla_dictionaries "$search_term")
	english_results=$(process_english_dictionaries "$search_term")

	# Output results
	process_output() {
		echo -e "Result for: ${UNDERLINE}${BOLD}${BRIGHT_CYAN}${search_term}${NC}" | sed 's/^/  /'
		echo
		echo -e "$bangla_results" | sed 's/^/    /'
		echo
		echo -e "$english_results" | sed 's/^/    /'
	}
	process_output
}

get_search_term() {
	local search_term=""

	local words_link="https://raw.githubusercontent.com/dwyl/english-words/master/words.txt"
	local english_word_file="$HOME/.dotfiles/bin/.local/bin/dictionary_words_eng.txt"

	if [[ -f "$english_word_file" ]]; then
		echo "" >&0
	else
		echo "Downloading words ‚è¨" >&2
		echo "" >&2

		# Download the file
		curl -s "$words_link" -o "$english_word_file"

		# Check if the download was successful
		if [[ $? -eq 0 ]]; then
			echo "Downloaded ‚úÖ" >$0
		else
			echo "Download failed ‚≠ï" >&2
		fi
	fi

	local words_fuzzy=""
	# get term from user
	if [[ -f "$english_word_file" ]]; then
		words_fuzzy=$(cat $english_word_file)
	fi

	local fzf_header="Word to search local Dictionary"
	local prompt_txt="üîç type: "
	while true; do
		search_term=$(echo "$words_fuzzy" | fzf -e --layout="reverse" --border="rounded" --prompt="$prompt_txt" --header="$fzf_header" --header-first --print-query | tail -1)
		if [[ "$search_term" =~ \  ]]; then
			prompt_txt="üîç type (‚ÑπÔ∏è no space): "
		else
			break
		fi
	done

	echo $search_term
}

# --------------------
# Execution
if [[ $# -eq 1 ]]; then
	search_term=$1
else
	search_term=$(get_search_term)
fi
if [[ -z $search_term ]]; then
	exit 0
fi

# dict_main $search_term
dict_main $search_term | less -R
